name: 'Continuous Delivery'

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: flight-delay-latam
  SERVICE_NAME: flight-delay-api
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: flight-delay-latam
    
    - name: Configure Docker for GCR
      run: |
        gcloud auth configure-docker --quiet
    
    - name: Build Docker image
      working-directory: challenge_MLE
      run: |
        docker build -t gcr.io/flight-delay-latam/flight-delay-api:${{ github.sha }} .
        docker tag gcr.io/flight-delay-latam/flight-delay-api:${{ github.sha }} gcr.io/flight-delay-latam/flight-delay-api:latest
    
    - name: Push Docker image to GCR
      run: |
        docker push gcr.io/flight-delay-latam/flight-delay-api:${{ github.sha }}
        docker push gcr.io/flight-delay-latam/flight-delay-api:latest
    
    - name: Deploy to Cloud Run
      id: deploy
      run: |
        gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/flight-delay-latam/flight-delay-api:${{ github.sha }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --allow-unauthenticated \
          --memory 2Gi \
          --cpu 2 \
          --timeout 300 \
          --max-instances 100 \
          --min-instances 1 \
          --port 8080 \
          --set-env-vars "ENVIRONMENT=production" \
          --project flight-delay-latam
    
    - name: Get Service URL
      id: service-url
      run: |
        SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
          --platform managed \
          --region ${{ env.REGION }} \
          --format 'value(status.url)' \
          --project flight-delay-latam)
        echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
        echo "Deployed to: $SERVICE_URL"
        echo "Please update the Makefile with: API_URL = $SERVICE_URL"
    
    - name: Run smoke test
      run: |
        sleep 10
        curl -f ${{ steps.service-url.outputs.url }}/health || exit 1
        echo "Health check passed!"
    
    - name: Run stress test
      working-directory: challenge_MLE
      run: |
        pip install locust
        # Usar la URL directamente en lugar del Makefile
        locust -f tests/stress/api_stress.py --print-stats --html reports/stress-test.html --run-time 60s --headless --users 100 --spawn-rate 1 -H ${{ steps.service-url.outputs.url }}
      continue-on-error: true
    
    - name: Deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Deployment successful!"
          echo "üöÄ Service URL: ${{ steps.service-url.outputs.url }}"
          echo "üìù Remember to update Makefile with: API_URL = ${{ steps.service-url.outputs.url }}"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
